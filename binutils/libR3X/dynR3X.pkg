include 'r3x_asm.pkg'
format binary as 'ro'
org 0
_begin:
dd 0xDEADBEEF
dd 0
dd 0
dd _text
dd _end_text - _text
dd _export
dd _end_export - _export
dd _data
dd _end_data - _data
dd _bss 
dd _end_bss - _bss
dd _name_addr
dd _pub_addr
_name_addr: db 'Default Shared Library', 0
_pub_addr: db 'No publisher', 0
_end_begin:
times 4096-(_end_begin - _begin) db 0
macro DECLARE_SECTION name {
        local m,c
        c equ 0
        macro .#name [a] \{ 
                \common 
                rept 1 x:c+1 \\{ c equ x
                                 macro m\\#x a \\}
        \} 
        macro STORE_SECTION_#name \{ 
                rept c x \\{ m\\#x \\}
        \} 
}
macro declare_bss_entry entry_name {
	local symnameaddr
	.data \{
		symnameaddr:
		db 'BSS Entry (4-bytes): '
		db `entry_name#, 0
	\}
	.bss \{
		#entry_name: 
		rd 1
		entry_name#_end_bss: 
	\}
}
DECLARE_SECTION text
DECLARE_SECTION data
DECLARE_SECTION bss
DECLARE_SECTION export
macro end {
	align 4096
	_text:
	align 1
	STORE_SECTION_text
	align 4096
	_end_text:
	align 4096
	_data:
	STORE_SECTION_data
	_end_data:
	_export:
	STORE_SECTION_export
	_end_export:
	_bss:
	STORE_SECTION_bss
	align 4096
	_end_bss:
}
macro pushstring string {
	local addr, behind
	pushar R1
	loadr R1, adds_r
	addrr R1, R20
	pushr R1
	popar R1
	.DATA \{ adds_r: db string, 0 \}
} 
macro loadrm size, reg1, memaddr {
	if reg1 eq R0
	else 
	pushr R0
	end if
	if reg1 eq R1
	else 
	pushr R1
	end if
	loadr R0, memaddr
	if size eq byte
		lodsb
	else if size eq word
		lodsw
	else if size eq dword
		lodsd
	else 
		display 'Unknown size operand for loadrm'
		err
	end if
	loadrr reg1, R1
	if reg1 eq R0
	else 
	popr R0
	end if
	if reg1 eq R1
	else 
	popr R1
	end if
}
macro function name {
	#name:
	local symbol_name
	.data \{
		symbol_name: db `name#, 0
	\}
	.export \{
		dd symbol_name
		dd name#
	\}
}
macro function name {
	#name:
	local symbol_name
	.data \{
		symbol_name: db `name#, 0
	\}
	.export \{
		dd symbol_name
		dd name#
	\}
}
macro endfunction name {
	name#_end:
}
